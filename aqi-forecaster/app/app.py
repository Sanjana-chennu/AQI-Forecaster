import streamlit as st
import os
import sys
from dotenv import load_dotenv

# Add the parent directory to the system path to allow imports from 'bot'
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

# Load environment variables from .env file
load_dotenv()

# We can only import the agent after the path is set
from bot.agent import create_agent

# --- 1. Initialize the Agent ---
# We create the agent once and store it in Streamlit's session state
# to prevent it from being re-created on every user interaction.
if "agent_executor" not in st.session_state:
    # Check for API key
    if not os.getenv("GOOGLE_API_KEY"):
        st.error("ðŸš¨ GOOGLE_API_KEY environment variable not found. Please set it in your .env file.")
        st.stop()
    st.session_state.agent_executor = create_agent()

# --- 2. Set Up the Streamlit Page ---
st.title("ðŸ¤– AI Air Quality Forecaster")
st.caption("I'm an AI data analyst. Ask me to forecast the PM2.5 levels for the coming hours!")

# --- 3. Manage Chat History ---
# Initialize chat history if it doesn't exist
if "messages" not in st.session_state:
    st.session_state.messages = []

# Display prior chat messages
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        # Check if the content is a dict (our tool's output) or just text
        if isinstance(message["content"], dict) and "plot_path" in message["content"]:
            st.image(message["content"]["plot_path"])
        else:
            st.markdown(message["content"])

# --- 4. Handle User Input ---
# Get user input from the chat box
if prompt := st.chat_input("e.g., Forecast the pollution for the next 12 hours"):
    # Add user's message to chat history and display it
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    # --- 5. Get and Display the Bot's Response ---
    with st.chat_message("assistant"):
        # Show a thinking spinner while the bot is working
        with st.spinner("Thinking..."):
            response = st.session_state.agent_executor.invoke({"input": prompt})
            
            # The actual text response from the agent is in the 'output' key
            bot_response = response['output']
            
            # The tool returns a dictionary, but the agent's final output is a
            # string. We need to find the plot generated by the last tool run.
            plot_path = './app/forecast_plot.png'
            if os.path.exists(plot_path):
                st.image(plot_path)
                # Clean up the plot file after displaying it
                os.remove(plot_path)

            st.markdown(bot_response)
            
    # Add the full bot response (text) to chat history
    st.session_state.messages.append({"role": "assistant", "content": bot_response})